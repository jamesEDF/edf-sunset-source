--PORTFOLIO STAGES
--CTEs prefixed with LMP referring to Live MPAN Portfolio
WITH Live_MPAN_Portfolio_Stage AS (
	SELECT
		sp.MPANCORE
		, cus.CUSTOMERNAME_CURRENT AS CUSTOMERNAME
		, cus.CUSTOMERID
		, s.SITEID
		, acc.ACCOUNTID
		, acc.LIVEACCOUNTFLAG
		, acc.ACCOUNTSETUPDATE
		, acc.ACCOUNTSTARTDATE
		, acc.BILLCYCLE
		, CASE 
			 WHEN sp.MARKETSEGMENT_CURRENT = 'HH' AND acc.BILLINGFREQUENCY = ' Unknown' THEN 'Monthly'
			 WHEN acc.BILLCYCLE LIKE '%Month%' AND acc.BILLINGFREQUENCY = ' Unknown' THEN 'Monthly'
			 WHEN acc.BILLCYCLE LIKE '%Quarter%' AND acc.BILLINGFREQUENCY = ' Unknown' THEN 'Quarterly'
			 WHEN acc.BILLINGFREQUENCY IN ('4-4-5','28 day cycle') THEN 'Monthly'
			 WHEN sp.MARKETSEGMENT_CURRENT = 'HH' AND acc.BILLINGFREQUENCY = 'Quarterly' THEN 'Monthly'
			 WHEN sp.MARKETSEGMENT_CURRENT = 'NHH' AND acc.BILLINGFREQUENCY = ' Unknown' AND sp.PROFILECLASSKEY_CURRENT BETWEEN '1' AND '4' THEN 'Quarterly'
			 WHEN sp.MARKETSEGMENT_CURRENT = 'NHH' AND acc.BILLINGFREQUENCY = ' Unknown' AND sp.PROFILECLASSKEY_CURRENT BETWEEN '5' AND '8' THEN 'Monthly'
			 ELSE acc.BILLINGFREQUENCY 
		END AS BILLINGFREQUENCY
		, acc.PAYMENTMETHOD
		, acc.PAYMENTTERM
		, sa.IMPORTEXPORTFLAG AS SAIMPORTEXPORTFLAG
		, sa.SERVICEAGREEMENTTYPE AS SATYPE
		, sa.SERVICEAGREEMENTID AS SAID
	--new field: DUOS_SAID
		, duos.SERVICEAGREEMENTID AS DUOS_SAID
		, duos.SASTATUS AS DUOS_STATUS
		, sa.SASTARTDATE
		, sa.SAENDDATE
		, sa.SERVICEAGREEMENTSTATUS AS SASTATUS
		, saeff.RATESCHEDULEDESC AS SARATESCHEDULE
		, sp.MARKETSEGMENT_CURRENT AS MARKETSEGMENT
		, LTRIM(RTRIM(sp.DATAAGGREGATORKEY)) AS DATAAGGREGATOR
		, LTRIM(RTRIM(sp.DATACOLLECTORKEY)) AS DATACOLLECTOR
		, sp.ENERGISATIONSTATUSKEY AS ENERGISATIONSTATUS
		, sp.ENERGISATIONSTATUSDATE AS ENERGISATIONSTATUSDATE
		, LTRIM(RTRIM(sp.GSPGROUPIDKEY)) AS GSPGROUP
	--new field: DNO Name
		, CASE 
			WHEN LTRIM(RTRIM(sp.GSPGROUPIDKEY)) IN ('_G') THEN 'Electricity North West'
			WHEN LTRIM(RTRIM(sp.GSPGROUPIDKEY)) IN ('_P', '_H') THEN 'Scottish and Southern Electricity Networks'
			WHEN LTRIM(RTRIM(sp.GSPGROUPIDKEY)) IN ('_N', '_D') THEN 'Scottish Power Energy Networks'
			WHEN LTRIM(RTRIM(sp.GSPGROUPIDKEY)) IN ('_F', '_M') THEN 'Northern Powergrid'
			WHEN LTRIM(RTRIM(sp.GSPGROUPIDKEY)) IN ('_B', '_E', '_K', '_L') THEN 'National Grid'
			WHEN LTRIM(RTRIM(sp.GSPGROUPIDKEY)) IN ('_A', '_C', '_J') THEN 'UK Power Networks'
			ELSE NULL
		END AS DNONAME
		, sp.LINELOSSFACTORKEY_CURRENT  AS LINELOSSFACTOR
		, sp.MEASUREMENTCLASSKEY_CURRENT AS MEASUREMENTCLASS
		, LTRIM(RTRIM(sp.METEROPERATORKEY)) AS METEROPERATOR
		, sp.METERTIMESWITCHCODEKEY AS METERTIMESWITCHCODE
		, sp.PROFILECLASSKEY_CURRENT AS PROFILECLASS
		, LTRIM(RTRIM(sp.RETRIEVALMETHODKEY)) AS RETRIEVALMETHOD
		, sp.STANDARDSETTLEMENTCONFIGURATIONKEY_CURRENT AS SSC
		, LTRIM(RTRIM(sp.SUPPLIERKEY)) AS  SUPPLIER
		, sp.LINELOSSFACTORVOLTAGE_CURRENT AS VOLTAGETYPE
	--field ammendement: ASC using duos join
		, duos.AGREEDSUPPLYCAPACITY
	--new field: service agreement pricing point
		, sa.PRICINGPOINT
		, sp.ISAMR_CURRENT AS AMR
		, sp.AMREFFECTIVEDATE_CURRENT AS AMREFFECTIVEDATE
		, con.TPIPRIMARYNAME
		, cus.IMPORTSALESCONTACT
		, cus.CREDITVETTINGOVERRIDE_CURRENT AS CREDITVETTINGOVERRIDE
		, cus.DBCREDITRATING_CURRENT AS DBCREDITRATING
		, cus.DBOVERRIDESCORE_CURRENT AS DBOVERRIDESCORE
		, cus.SICCODE_CURRENT AS SICCODE
		, cus.OPERATIONALSEGMENT_CURRENT AS OPERATIONALSEGMENT
		, cus.SALESTEAM_CURRENT AS SALESTEAM
		, cus.SERVICESTEAM_CURRENT AS SERVICESTEAM
		, cus.ADDRESS AS CUSTOMERADDRESS
		, CASE 
			WHEN cus.ADDRESSLINE1 = ' Unknown' THEN '' 
			ELSE cus.ADDRESSLINE1 
		END AS CUSTOMERADDRESSLINE1
		, CASE 
			WHEN cus.ADDRESSLINE2 = ' Unknown' THEN '' 
			ELSE cus.ADDRESSLINE2 
		END AS CUSTOMERADDRESSLINE2
		, CASE 
			WHEN cus.ADDRESSLINE3 = ' Unknown' THEN '' 
			ELSE cus.ADDRESSLINE3 
		END AS CUSTOMERADDRESSLINE3
		, CASE 
			WHEN cus.ADDRESSLINE4 = ' Unknown' THEN '' 
			ELSE cus.ADDRESSLINE4 
		END AS CUSTOMERADDRESSLINE4
		, cus.CITY AS CUSTOMERCITY
		, CASE 
			WHEN cus.COUNTY = ' Unknown' THEN '' 
			ELSE cus.COUNTY 
		END AS CUSTOMERCOUNTY
		, LTRIM(RTRIM(cus.POSTCODEOUT)) AS CUSTOMERPOSTCODEOUT
		, cus.POSTCODEIN AS CUSTOMERPOSTCODEIN
	--Ammended field: Postcode incode and outcode split by space
		, REPLACE(
			CONCAT(
				LTRIM(RTRIM(cus.POSTCODEOUT)),
				' ', 
				LTRIM(RTRIM(cus.POSTCODEIN))
				),
				'Unknown', 
				''
			) AS CUSTOMERPOSTCODE
		, s.ADDRESS AS SITEADDRESS
		, CASE 
			WHEN s.ADDRESSLINE1 = ' Unknown' THEN '' 
			ELSE s.ADDRESSLINE1 
		END AS	SITEADDRESSLINE1
		, CASE 
			WHEN s.ADDRESSLINE2 = ' Unknown' THEN '' 
			ELSE s.ADDRESSLINE2 
		END AS SITEADDRESSLINE2
		, CASE 
			WHEN s.ADDRESSLINE3 = ' Unknown' THEN '' 
			ELSE s.ADDRESSLINE3 
		END AS SITEADDRESSLINE3
		, CASE 
			WHEN s.ADDRESSLINE4 = ' Unknown' THEN '' 
			ELSE s.ADDRESSLINE4 
		END AS  SITEADDRESSLINE4
		, s.CITY AS SITECITY
		, CASE 
			WHEN s.COUNTY = ' Unknown' THEN '' 
			ELSE s.COUNTY 
		END AS SITECOUNTY
		, LTRIM(RTRIM(s.POSTCODEOUT)) AS SITEPOSTCODEOUT
		, s.POSTCODEIN AS SITEPOSTCODEIN
	--Ammended field: Postcode incode and outcode split by space
		, REPLACE(
			CONCAT(
				LTRIM(RTRIM(s.POSTCODEOUT)), 
				' ', 
				LTRIM(RTRIM(s.POSTCODEIN))
				), 
				'Unknown', 
				''
			) AS SITEPOSTCODE
		, s.OVERALLMETERTYPE AS SITEMETERTYPE
		, LTRIM(RTRIM(s.SITEENERGISATIONSTATUS)) AS SITEENERGISATIONSTATUS
		, sp.SUPPLIERDATE AS SUPPLIERDATE
		, cus.ISMICROBUSINESS AS MICROCUSTOMER
		, cus.ISSMALLBUSINESS AS SMALLBUSINESSCUSTOMER
		, sa.SERVICETYPE
		, CASE 
			WHEN acc.BILLINGADDRESSLINE1 = ' Unknown' THEN '' 
			ELSE acc.BILLINGADDRESSLINE1 
		END AS BILLINGADDRESSLINE1
		, CASE 
			WHEN acc.BILLINGADDRESSLINE2 = ' Unknown' THEN '' 
			ELSE acc.BILLINGADDRESSLINE2 
		END AS BILLINGADDRESSLINE2
		, CASE 
			WHEN acc.BILLINGADDRESSLINE3 = ' Unknown' THEN '' 
			ELSE acc.BILLINGADDRESSLINE3 
		END AS BILLINGADDRESSLINE3
		, CASE 
			WHEN acc.BILLINGADDRESSLINE4 = ' Unknown' THEN '' 
			ELSE acc.BILLINGADDRESSLINE4 
		END AS BILLINGADDRESSLINE4
		, acc.BILLINGADDRESSCITY
		, CASE 
			WHEN acc.BILLINGADDRESSCOUNTY = ' Unknown' THEN '' 
			ELSE acc.BILLINGADDRESSCOUNTY 
		END AS BILLINGADDRESSCOUNTY
		, REPLACE(
			LTRIM(RTRIM(acc.BILLINGADDRESSPOSTCODE)
			),
			'Unknown', 
			''
		) AS BILLINGADDRESSPOSTCODE
		, acc.BILLFORMATTYPE
		, REPLACE(acc.SITEREFERENCECODE ,'P.O.-','') AS SITEREFERENCECODE
		, acc.ACCOUNTTYPE
		, sa.CONTRACTID
	--new field: Contract Quote Number
		, con.QMCONTRACTIDENTIFIER
	--new field: MBFLEXID
		, con.MBFLEXID
--new field: Framework ID
		, con.FRAMEWORKID
		, con.CONTRACTSTARTDATE
		, con.CONTRACTENDDATE
		, con.CONTRACTACCEPTANCEDATE
		, (LTRIM(RTRIM(con.CONTRACTCREATIONDATETIME))) AS CONTRACTCREATIONDATE
		, con.PRODUCTNAME AS CONTRACTPRODUCTNAME
		, sp.METERCLASS_CURRENT AS METERCLASS
		, acc.MASTERACCOUNTID
		, sa.MASTERSERVICEAGREEMENTID
		, cus.BILLINGTEAMNAME
		, CASE
			WHEN saeff.RATESCHEDULEDESC LIKE '%Deemed%' THEN 'Deemed'
			WHEN saeff.RATESCHEDULEDESC LIKE '%Extended%' THEN 'Extended Supply'
			WHEN saeff.RATESCHEDULEDESC LIKE '%Tariff%' THEN 'Tariff'
			ELSE 'Contract' 
		END AS MARKETTYPE
	FROM 
		DIMENSIONAL_IAC.FACTSERVICEPOINT fsp
		JOIN DIMENSIONAL_IAC.DIMSERVICEPOINT sp ON fsp.SK_SERVICEPOINTID = sp.SK_SERVICEPOINTID
		JOIN DIMENSIONAL_IAC.DIMCUSTOMER cus ON fsp.SK_CUSTOMERID = cus.SK_CUSTOMERID
		JOIN DIMENSIONAL_IAC.DIMSITE s ON fsp.SK_SITEID = s.SK_SITEID
		JOIN DIMENSIONAL_IAC.DIMACCOUNT acc ON fsp.SK_ACCOUNTID = acc.SK_ACCOUNTID
		JOIN DIMENSIONAL_IAC.DIMSERVICEAGREEMENT sa ON fsp.SK_SERVICEAGREEMENTID = sa.SK_SERVICEAGREEMENTID
		AND sa.SERVICETYPE = 'Energy Service'
		AND (
				(
				sa.SERVICEAGREEMENTSTATUS IN ('Active','Pending Stop','Stopped','Reactivated','Closed') 
				AND acc.LIVEACCOUNTFLAG = 'Yes'
			)
			OR (
				sa.SERVICEAGREEMENTSTATUS NOT IN ('Canceled','Cancelled' ,'Pending Start','Pending Stop' ,'Active') 
				AND acc.LIVEACCOUNTFLAG = 'No'
			)
		)
	--DUOS Join
		LEFT JOIN (
			SELECT
				sp.MPANCORE
				, sa.SERVICEAGREEMENTID
				, sa.SASTARTDATE
				, sa.SAENDDATE
				, sa.SERVICEAGREEMENTSTATUS AS SASTATUS
				, sa.AGREEDSUPPLYCAPACITY 
			FROM
				DIMENSIONAL_IAC.DIMSERVICEAGREEMENT sa
				JOIN DIMENSIONAL_IAC.FACTSERVICEPOINT fsp ON fsp.SK_SERVICEAGREEMENTID = sa.SK_SERVICEAGREEMENTID
				JOIN DIMENSIONAL_IAC.DIMSERVICEPOINT sp ON sp.SK_SERVICEPOINTID = fsp.SK_SERVICEPOINTID
				JOIN DIMENSIONAL_IAC.DIMACCOUNT acc ON acc.SK_ACCOUNTID = fsp.SK_ACCOUNTID
			WHERE
				sa.SERVICEAGREEMENTTYPE IN ('DUoS - Major Customer (Import)','DUoS - Multi Customer (Import)')
				AND (
						(
						sa.SERVICEAGREEMENTSTATUS IN ('Active','Pending Stop','Stopped','Reactivated','Closed')
						AND acc.LIVEACCOUNTFLAG = 'Yes'
					)
					OR (
						sa.SERVICEAGREEMENTSTATUS NOT IN ('Canceled','Cancelled' ,'Pending Start','Pending Stop' ,'Active')
						AND acc.LIVEACCOUNTFLAG = 'No'
					)
				)
			GROUP BY
			sp.MPANCORE
			, sa.SERVICEAGREEMENTID
			, sa.SASTARTDATE
			, sa.SAENDDATE
			, sa.SERVICEAGREEMENTSTATUS
			, sa.AGREEDSUPPLYCAPACITY
		) duos ON duos.MPANCORE = sp.MPANCORE
		AND sa.SASTARTDATE = duos.SASTARTDATE
		AND sa.SAENDDATE = duos.SAENDDATE
		JOIN DIMENSIONAL_IAC.DIMCONTRACT con ON con.SK_CONTRACTID = fsp.SK_CONTRACTID
		JOIN DIMENSIONAL_IAC.DIMSERVICEAGREEMENTEFFECTIVEDETAIL saeff ON saeff.SK_SERVICEAGREEMENTEFFECTIVEDETAILID = fsp.SK_SERVICEAGREEMENTEFFECTIVEDETAILID
--Moved LMP_MAIN query filters to Live_MPAN_Portfolio_Stage for query performance boost
WHERE 
	acc.LIVEACCOUNTFLAG ='Yes'
	AND sa.SERVICEAGREEMENTSTATUS IN ('Active', 'Pending Stop')
	AND sp.SUPPLIERKEY IN ('LOND', 'SEEB', 'SWEB')
	AND sa.IMPORTEXPORTFLAG = 'Import'
GROUP BY
		sp.MPANCORE
		, cus.CUSTOMERNAME_CURRENT
		, cus.CUSTOMERID
		, s.SITEID
		, acc.ACCOUNTID
		, acc.LIVEACCOUNTFLAG
		, acc.ACCOUNTSETUPDATE
		, acc.ACCOUNTSTARTDATE
		, acc.BILLCYCLE
		, acc.BILLINGFREQUENCY
		, acc.PAYMENTMETHOD
		, acc.PAYMENTTERM
		, sa.IMPORTEXPORTFLAG
		, sa.SERVICEAGREEMENTTYPE
		, sa.SERVICEAGREEMENTID
		, duos.SERVICEAGREEMENTID
		, duos.SASTATUS
		, sa.SASTARTDATE
		, sa.SAENDDATE
		, sa.SERVICEAGREEMENTSTATUS
		, saeff.RATESCHEDULE
		, sp.MARKETSEGMENT_CURRENT
		, sp.DATAAGGREGATORKEY
		, sp.DATACOLLECTORKEY
		, sp.ENERGISATIONSTATUSKEY
		, sp.ENERGISATIONSTATUSDATE
		, sp.GSPGROUPIDKEY
		, sp.LINELOSSFACTORKEY_CURRENT
		, sp.MEASUREMENTCLASSKEY_CURRENT
		, sp.METEROPERATORKEY
		, sp.METERTIMESWITCHCODEKEY
		, sp.PROFILECLASSKEY_CURRENT
		, sp.RETRIEVALMETHODKEY
		, sp.STANDARDSETTLEMENTCONFIGURATIONKEY_CURRENT
		, sp.SUPPLIERKEY
		, sp.LINELOSSFACTORVOLTAGE_CURRENT
		, duos.AGREEDSUPPLYCAPACITY
		, sa.PRICINGPOINT
		, sp.ISAMR_CURRENT
		, sp.AMREFFECTIVEDATE_CURRENT
		, con.TPIPRIMARYNAME
		, cus.IMPORTSALESCONTACT
		, cus.CREDITVETTINGOVERRIDE_CURRENT
		, cus.DBCREDITRATING_CURRENT
		, cus.DBOVERRIDESCORE_CURRENT
		, cus.SICCODE_CURRENT
		, cus.OPERATIONALSEGMENT_CURRENT
		, cus.SALESTEAM_CURRENT
		, cus.SERVICESTEAM_CURRENT
		, cus.ADDRESS
		, CASE
			WHEN cus.ADDRESSLINE1 = ' Unknown' THEN ''
			ELSE cus.ADDRESSLINE1
		END
		, CASE
			WHEN cus.ADDRESSLINE2 = ' Unknown' THEN ''
			ELSE cus.ADDRESSLINE2
		END
		, CASE
			WHEN cus.ADDRESSLINE3 = ' Unknown' THEN ''
			ELSE cus.ADDRESSLINE3
		END
		, CASE
			WHEN cus.ADDRESSLINE4 = ' Unknown' THEN ''
			ELSE cus.ADDRESSLINE4
		END
		, cus.CITY
		, CASE
			WHEN cus.COUNTY = ' Unknown' THEN ''
			ELSE cus.COUNTY
		END
		, cus.POSTCODEOUT
		, cus.POSTCODEIN
		, REPLACE(
			CONCAT(
				LTRIM(RTRIM(cus.POSTCODEOUT)),
				' ',
				LTRIM(RTRIM(cus.POSTCODEIN))
				),
				'Unknown',
				''
			)
		, s.ADDRESS
		, CASE
			WHEN s.ADDRESSLINE1 = ' Unknown' THEN ''
			ELSE s.ADDRESSLINE1
		END
		, CASE
			WHEN s.ADDRESSLINE2 = ' Unknown' THEN ''
			ELSE s.ADDRESSLINE2
		END
		, CASE
			WHEN s.ADDRESSLINE3 = ' Unknown' THEN ''
			ELSE s.ADDRESSLINE3
		END
		, CASE
			WHEN s.ADDRESSLINE4 = ' Unknown' THEN ''
			ELSE s.ADDRESSLINE4
		END
		, s.CITY
		, CASE
			WHEN s.COUNTY = ' Unknown' THEN ''
			ELSE s.COUNTY
		END
		, s.POSTCODEOUT
		, s.POSTCODEIN
		, REPLACE(
			CONCAT(
				LTRIM(RTRIM(s.POSTCODEOUT)),
				' ',
				LTRIM(RTRIM(s.POSTCODEIN))
				),
				'Unknown',
				''
			)
		, s.OVERALLMETERTYPE
		, s.SITEENERGISATIONSTATUS
		, sp.SUPPLIERDATE
		, cus.ISMICROBUSINESS
		, cus.ISSMALLBUSINESS
		, sa.SERVICETYPE
		, CASE
			WHEN acc.BILLINGADDRESSLINE1 = ' Unknown' THEN ''
			ELSE acc.BILLINGADDRESSLINE1
		END
		, CASE
			WHEN acc.BILLINGADDRESSLINE2 = ' Unknown' THEN ''
			ELSE acc.BILLINGADDRESSLINE2
		END
		, CASE
			WHEN acc.BILLINGADDRESSLINE3 = ' Unknown' THEN ''
			ELSE acc.BILLINGADDRESSLINE3
		END
		, CASE
			WHEN acc.BILLINGADDRESSLINE4 = ' Unknown' THEN ''
			ELSE acc.BILLINGADDRESSLINE4
		END
		, acc.BILLINGADDRESSCITY
		, CASE
			WHEN acc.BILLINGADDRESSCOUNTY = ' Unknown' THEN ''
			ELSE acc.BILLINGADDRESSCOUNTY
		END
		, REPLACE(LTRIM(RTRIM(acc.BILLINGADDRESSPOSTCODE)), 'Unknown', '')
		, acc.BILLFORMATTYPE
		, acc.SITEREFERENCECODE
		, acc.ACCOUNTTYPE
		, sa.CONTRACTID
		, con.MBFLEXID
		, con.FRAMEWORKID
		, con.QMCONTRACTIDENTIFIER
		, con.CONTRACTSTARTDATE
		, con.CONTRACTENDDATE
		, con.CONTRACTACCEPTANCEDATE
		, con.CONTRACTCREATIONDATETIME
		, con.PRODUCTNAME
		, saeff.RATESCHEDULEDESC
		, sp.STANDARDSETTLEMENTCONFIGURATION_CURRENT
		, sp.METERCLASS_CURRENT
		, acc.MASTERACCOUNTID
		, sa.MASTERSERVICEAGREEMENTID
		, cus.BILLINGTEAMNAME
)
--NEW TABLE: Billing Teams
, LMP_Billing_Team AS (
	SELECT
		bt.BILLINGTEAMNAME
		, CASE 
			WHEN bt.BILLINGTEAMNAME = ' UNKNOWN' THEN 'To be assigned'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 1' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 10' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 11' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 12' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 13' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 14' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 15' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 16' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 17' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 18' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 19' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 2' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 20' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 3' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 4' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 5' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 6' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 66' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 7' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 77' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 8' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 9' THEN 'Large Business'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 30' THEN 'Mid Market'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 31' THEN 'Mid Market'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 32' THEN 'Mid Market'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 33' THEN 'Mid Market'
			WHEN bt.BILLINGTEAMNAME = 'BILLING TEAM 34' THEN 'Mid Market'
			ELSE bt.BILLINGTEAMNAME
		END AS BILLINGTEAMSEGMENT
	FROM 
		(SELECT 
			DISTINCT UPPER(lmps.BILLINGTEAMNAME) AS BILLINGTEAMNAME 
		FROM 
			Live_MPAN_Portfolio_Stage AS lmps) AS bt
)
--CTE for VAT exemption
, LMP_VAT AS (
	SELECT
		vat.ACCOUNTID
		, vat.DECLARATIONID
		, vat.DECSTARTDATE
		, vat.DECENDDATE
		, vat.ACTIVEDATE
		, vat.TRUNC_ENDDATE
		, vat.SERVICETYPE
		, vat.DECLARATIONTYPE
		, vat.DECLARATIONPERCENTAGE
		, CASE 
			WHEN vat.DECLARATIONPERCENTAGE IS NULL THEN '20% VAT and Standard CCL'
			WHEN vat.DECLARATIONPERCENTAGE = 100 THEN 'VAT at 5% and Zero CCL'
			WHEN vat.DECLARATIONPERCENTAGE < 100 THEN CONCAT(vat.DECLARATIONPERCENTAGE, '% VAT Relief')
			ELSE NULL
		END AS VAT_EXEMPT
	FROM (
		SELECT
		da.ACCOUNTID
		, dde.DECLARATIONID
		, dde.STARTDATE AS DECSTARTDATE
		, dde.ENDDATE AS DECENDDATE
		, dde.ACTIVEDATE
		, LEAD(dde.ACTIVEDATE) OVER (PARTITION BY da.ACCOUNTID ORDER BY dde.ACTIVEDATE) AS TRUNC_ENDDATE
		, MAX(dde.ACTIVEDATE) OVER (PARTITION BY da.ACCOUNTID) AS MAXACTIVEDATE
		, MAX(dde.STARTDATE) OVER (PARTITION BY da.ACCOUNTID) AS MAXDECSTARTDATE
		, dde.SERVICETYPE
		, dde.DECLARATIONTYPE
		, dde.DECLARATIONPERCENTAGE
	FROM 
		DIMENSIONAL_IAC.DIMACCOUNT da
		LEFT JOIN DIMENSIONAL_IAC.FACTDECLARATION fd ON fd.SK_ACCOUNTID = da.SK_ACCOUNTID
		LEFT JOIN DIMENSIONAL_IAC.DIMDECLARATION dde ON dde.SK_DECLARATIONID = fd.SK_DECLARATIONID
	WHERE 
		dde.DECLARATIONTYPE <> 'CCL Relief'
	) vat
	WHERE 
		1=1
)
--NEW TABLE: Replacing tbl_Smart_Meter_Stage, this table allows for full meter history
, LMP_Metering AS (
	SELECT 
		DISTINCT * 
	FROM ( 
		SELECT
			lmp_mtr.MPANCORE
			, lmp_mtr.METERTYPE
			, lmp_mtr.INSTALLATIONDATE
			, lmp_mtr.REMOVALDATE
			, lmp_mtr.TRUNC_REMOVALDATE
			, lmp_mtr.CTRATIO
			, lmp_mtr.METERID
			--New field: METER_TYPE
			, CASE 
				WHEN lmp_mtr.METERTYPE LIKE '%1.0%' THEN 'SMETS 1'
				WHEN lmp_mtr.METERTYPE like '%2.0%' THEN 'SMETS 2'
				WHEN lmp_mtr.METERTYPE LIKE '%AMR%' THEN 'AMR'
				WHEN lmp_mtr.METERTYPE LIKE '%Automated%' THEN 'AMR'
				WHEN lmp_mtr.METERTYPE = 'Non-Half Hourly' THEN 'NHH'
				WHEN lmp_mtr.METERTYPE = ' Unknown' THEN 'Unknown'
				ELSE 'Other' 
			END AS METER_TYPE
			--New field: METER_TYPE_CURRENT
			, FIRST_VALUE(CASE 
							WHEN lmp_mtr.METERTYPE LIKE '%1.0%' THEN 'SMETS 1'
							WHEN lmp_mtr.METERTYPE LIKE '%2.0%' THEN 'SMETS 2'
							WHEN lmp_mtr.METERTYPE LIKE '%AMR%' THEN 'AMR'
							WHEN lmp_mtr.METERTYPE LIKE '%Automated%' THEN 'AMR'
							WHEN lmp_mtr.METERTYPE = 'Non-Half Hourly' THEN 'NHH'
							WHEN lmp_mtr.METERTYPE = ' Unknown' THEN 'Unknown'
							ELSE 'Other' 
						END) OVER (PARTITION BY lmp_mtr.MPANCORE ORDER BY lmp_mtr.INSTALLATIONDATE DESC) AS METER_TYPE_CURRENT
		FROM (
			SELECT
				sp.MPANCORE
				, mc.METERTYPE
				, REPLACE(mc.REMOVALDATE,'2079-01-01', '') AS REMOVALDATE
				--trunc_removaldate field creates a gap filling meter exchange date the day before the installation date of the next meter if no removal date exists 
				--but only where there are multiple distinct meter installation dates per mpan to avoid creating removal dates for multi meter sites
				, IFF(
					mc.REMOVALDATE = '2079-01-01'
					AND COUNT(DISTINCT mc.INSTALLATIONDATE) OVER (PARTITION BY sp.MPANCORE) > 1
					AND LEAD(mc.INSTALLATIONDATE) OVER (PARTITION BY sp.MPANCORE ORDER BY INSTALLATIONDATE ASC) IS NOT NULL,
					LEAD(INSTALLATIONDATE) OVER (PARTITION BY sp.MPANCORE ORDER BY INSTALLATIONDATE ASC),
					REMOVALDATE
				) AS TRUNC_REMOVALDATE
				--New field: CTRATIO
				, IFNULL(IFF(mc.CTRATIO = ' Unknown', 'W/C', mc.CTRATIO), 'W/C') AS CTRATIO
				, mc.METERID
				, mc.INSTALLATIONDATE
				, mc.ACTIVEDATE
				, mc.ISCURRENTROW
				--New field: SKIPBADMETERSACTIVE: if there's only one installation date and multiple active dates causing duplication, pick the latest activedate
				, IFF(
					COUNT(DISTINCT mc.INSTALLATIONDATE) OVER (PARTITION BY sp.MPANCORE) = 1
					AND COUNT(DISTINCT IFNULL(mc.CTRATIO, 'null')) OVER (PARTITION BY sp.MPANCORE) > 1,
					MAX(mc.ACTIVEDATE) OVER (PARTITION BY sp.MPANCORE), mc.ACTIVEDATE
				) AS SKIPBADMETERSACTIVE
				FROM 
					DIMENSIONAL_IAC.FACTMETERCONFIGURATION fmcf
					JOIN DIMENSIONAL_IAC.DIMMEASURINGCOMPONENT mc ON mc.SK_MEASURINGCOMPONENTID = fmcf.SK_MEASURINGCOMPONENTID
					AND mc.INSTALLATIONDATE <> '2079-01-01'
					JOIN DIMENSIONAL_IAC.DIMSERVICEPOINT sp ON sp.SK_SERVICEPOINTID = fmcf.SK_SERVICEPOINTID
				GROUP BY
					sp.MPANCORE
					, mc.METERTYPE
					, mc.REMOVALDATE
					, sp.SUPPLYFROMDATE
					, sp.SUPPLYTODATE
					, mc.METERID
					, mc.CTRATIO
					, mc.ACTIVEDATE
					, mc.ISCURRENTROW
					, mc.INSTALLATIONDATE
					, fmcf.METERSERIALNUMBER
				ORDER BY 
					sp.MPANCORE
					, INSTALLATIONDATE 
					ASC) AS lmp_mtr 
		WHERE 
			1=1
			AND lmp_mtr.SKIPBADMETERSACTIVE = lmp_mtr.ACTIVEDATE
			AND lmp_mtr.INSTALLATIONDATE <> lmp_mtr.TRUNC_REMOVALDATE
		ORDER BY 
			lmp_mtr.MPANCORE
			, lmp_mtr.INSTALLATIONDATE
	)
)
--ANNUALISATION STAGES
, LMP_Annualisation_Vol AS (
	SELECT
		anv.ACCOUNTID
		, SUM(IFNULL(anv.M1,0)) AS BILLEDCONSUMPTIONIMPORTKWHANNUALISED
	FROM (
		SELECT
			acc.ACCOUNTID
			, sp.MPANCORE
			, acc.LIVEACCOUNTFLAG
			, CASE 
				WHEN SUM(ff.NOOFDELIVERYDAYSWITHAICONSUMPTION) = 0 THEN 0
				ELSE (SUM(ff.ACTIVEPOWERIMPORT)
						/ ABS(
							SUM(ff.NOOFDELIVERYDAYSWITHAICONSUMPTION))
					) * 365 
			END AS M1
		FROM 
			DIMENSIONAL_IAC.FACTFINANCIAL ff
			JOIN DIMENSIONAL_IAC.DIMACCOUNT acc on acc.SK_ACCOUNTID = ff.SK_ACCOUNTID
			AND ff.ACTIVEPOWERIMPORT IS NOT NULL
			JOIN DIMENSIONAL_IAC.DIMSERVICEPOINT sp ON sp.SK_SERVICEPOINTID = ff.SK_SERVICEPOINTID
			AND sp.MPANCORE IS NOT NULL
		GROUP BY
			acc.ACCOUNTID
			, sp.MPANCORE
			, acc.LIVEACCOUNTFLAG
		) anv
	GROUP BY
		anv.ACCOUNTID
)
, LMP_Annualisation_Update AS (
	SELECT
		LMPS.ACCOUNTID
		, MIN(lmps.MPANCORE) AS MPANCORE
	FROM
		Live_MPAN_Portfolio_Stage AS lmps
	WHERE 
		lmps.LIVEACCOUNTFLAG = 'Yes'
		AND lmps.SASTATUS IN ('Active', 'Pending Stop')
		AND lmps.ENERGISATIONSTATUS = 'E'
	GROUP BY 
		lmps.ACCOUNTID
)
, LMP_Annualisation_Revenue_Stage AS (
	SELECT
		a.ACCOUNTID
		, CASE 
			WHEN a.BILLCYCLE LIKE '%Month%' AND COALESCE(a.BILLINGFREQUENCY,' Unknown') = ' Unknown' THEN 'Monthly'
			WHEN a.BILLCYCLE LIKE '%Qua%'  AND COALESCE(a.BILLINGFREQUENCY,' Unknown') = ' Unknown' THEN 'Quarterly'
			WHEN a.BILLINGFREQUENCY IN ('4-4-5','28 day cycle','Annually') THEN 'Monthly'
			ELSE a.BILLINGFREQUENCY 
		END AS BILLINGFREQUENCY
		, NULLIF(dsd.DATEVALUE, '2079-01-01') AS DELIVERYSTARTDATE
		, NULLIF(ded.DATEVALUE, '2079-01-01') AS DELIVERYENDDATE
		, bsd.ISLATESTSEGMENT AS LATESTSEGMENT
		, CAST(
			CAST(
				SUM(ff.TOTALNETAMOUNT) AS FLOAT
				) AS DECIMAL(18,4)
			) AS NETAMOUNT
	FROM 
		DIMENSIONAL_IAC.FACTFINANCIAL ff
		JOIN DIMENSIONAL_IAC.DIMACCOUNT a ON a.SK_ACCOUNTID = ff.SK_ACCOUNTID
		JOIN DIMENSIONAL_IAC.DIMDATE gldd ON gldd.SK_DATEID = ff.SK_GLDISTRIBUTIONDATEID
		AND gldd.CALENDARYEARID BETWEEN YEAR(CURRENT_TIMESTAMP)-1 AND YEAR(CURRENT_TIMESTAMP)
		JOIN DIMENSIONAL_IAC.DIMDATE dsd ON dsd.SK_DATEID = ff.SK_DELIVERYSTARTDATEID
		JOIN DIMENSIONAL_IAC.DIMDATE ded ON ded.SK_DATEID = ff.SK_DELIVERYENDDATEID
		JOIN DIMENSIONAL_IAC.DIMBILLSEGMENTDETAIL bsd ON bsd.SK_BILLSEGMENTDETAILID = ff.SK_BILLSEGMENTDETAILID
		AND bsd.ISLATESTSEGMENT = 'Yes'
	GROUP BY
		a.ACCOUNTID
		, a.BILLINGFREQUENCY
		, a.BILLCYCLE
		, dsd.DATEVALUE
		, ded.DATEVALUE
		, bsd.ISLATESTSEGMENT
)
, LMP_Annualisation_Revenue_Stage_Desired_Dates AS (
	SELECT 
		lmpar.ACCOUNTID
		, CASE 
			WHEN MIN(lmpar.BILLINGFREQUENCY) = 'Monthly' THEN DATEADD(DAY, -365, MAX(lmpar.DELIVERYENDDATE))
			WHEN MIN(lmpar.BILLINGFREQUENCY)= 'Quarterly' THEN DATEADD(DAY, -455, MAX(lmpar.DELIVERYENDDATE))
		END AS DESIREDDATE
	FROM
		LMP_Annualisation_Revenue_Stage AS lmpar
	GROUP BY 
		lmpar.ACCOUNTID
)
, LMP_Annualisation_Revenue_Master AS (
	SELECT
		lmpar.ACCOUNTID
		, (SUM(lmpar.NETAMOUNT)
			/ NULLIF(
				DATEDIFF(DAY, MIN(CAST(lmpar.DELIVERYSTARTDATE AS DATE)), MAX(CAST(lmpar.DELIVERYENDDATE AS DATE)) + 1)
			, 0)
		) * 365 AS ANNUALISED_AMOUNT
	FROM 
		LMP_Annualisation_Revenue_Stage AS lmpar
		INNER JOIN LMP_Annualisation_Revenue_Stage_Desired_Dates AS lmpdd ON lmpar.ACCOUNTID = lmpdd.ACCOUNTID
		AND lmpar.DELIVERYSTARTDATE >= lmpdd.DESIREDDATE
	GROUP BY
		lmpar.ACCOUNTID
)
--MAIN QUERY
SELECT
--SECTION: LOOKUP
	LMP_MAIN.MPANCORE AS "MPAN"
	, LMP_MAIN.CUSTOMERNAME AS "CustomerName"
	, LMP_MAIN.CUSTOMERID AS "CustomerID"
	, LMP_MAIN.ACCOUNTID AS "AccountID"
	, LMP_MAIN.SITEID AS "SiteID"
	, LMP_MAIN.SUPPLIER AS "Supplier"
	, LMP_MAIN.SUPPLIERDATE AS "SupplierDate"
	--New field: BillingTeamSegmented (Large Business, Mid Market,TBA)
	, LMP_Billing_Team.BILLINGTEAMSEGMENT AS "BillingTeamSegmented"
	, MPANEAC.METERINGSYSTEMEACKWH AS "EAC"
	, LMP_Annualisation_Vol.BILLEDCONSUMPTIONIMPORTKWHANNUALISED AS "AnnualisedConsumptionkWh"
	, LMP_Annualisation_Revenue_Master.ANNUALISED_AMOUNT AS "AnnualisedRevenue"
	--New field: LiveSubcategory -- check code for Historical MPAN Golden Table
--SECTION: ACCOUNT
	, LMP_MAIN.ACCOUNTTYPE AS "AccountType"
	, LMP_MAIN.PAYMENTMETHOD AS "PaymentMethod"
	, LMP_MAIN.PAYMENTTERM AS "PaymentTerm"
	, LMP_MAIN.ACCOUNTSTARTDATE AS "AccountStartDate"
	, LMP_MAIN.ACCOUNTSETUPDATE AS "AccountSetupDate"
	--NEW Field: VAT_EXEMPT_CURRENT
	, CASE 
		WHEN (LISTAGG(DISTINCT LMP_VAT.VAT_EXEMPT, ', ')) = '' THEN '20% VAT and Standard CCL' 
		ELSE (LISTAGG(DISTINCT LMP_VAT.VAT_EXEMPT, ', '))
	END AS "VATExempt"
	, LMP_MAIN.MASTERACCOUNTID AS "MasterAccountID"
--SECTION: SERVICE AGREEMENT
	, LMP_MAIN.SAID AS "ServiceAgreementID"
	, LMP_MAIN.SATYPE AS "ServiceAgreementType"
	, LMP_MAIN.DUOS_SAID AS "DUOSServiceAgreementID"
	, LMP_MAIN.SASTARTDATE AS "ServiceAgreementStartDate"
	, LMP_MAIN.SAENDDATE AS "ServiceAgreementEndDate"
	, LMP_MAIN.SASTATUS AS "ServiceAgreementStatus"
	, LMP_MAIN.DUOS_STATUS AS "DUOSServiceAgreementStatus"
	, LMP_MAIN.SARATESCHEDULE AS "ServiceAgreementRateSchedule"
	, LMP_MAIN.AGREEDSUPPLYCAPACITY AS "AgreedSupplyCapacity"
	, LMP_MAIN.PRICINGPOINT AS "PricingPoint"
	--	, LMP_MAIN.SAIMPORTEXPORTFLAG as "ImportExportFlag"
	, LMP_MAIN.MASTERSERVICEAGREEMENTID AS "MasterServiceAgreementID"
--SECTION: MPAN SUPPLEMENTARY
	, LMP_MAIN.MARKETSEGMENT AS "MarketSegment"
	, LMP_MAIN.DATAAGGREGATOR AS "DataAggregator"
	, LMP_MAIN.DATACOLLECTOR AS "DataCollector"
	, LMP_MAIN.METEROPERATOR AS "MeterOperator"
	, LMP_MAIN.ENERGISATIONSTATUS AS "EnergisationStatus"
	, LEFT(LMP_MAIN.ENERGISATIONSTATUSDATE,10) AS "EnergisationStatusDate"
	, LMP_MAIN.GSPGROUP AS "GSPGroup"
	, LMP_MAIN.DNOName AS "DNOName"
	, LMP_MAIN.LINELOSSFACTOR AS "LineLossFactor"
	, LMP_MAIN.MEASUREMENTCLASS AS "MeasurementClass"
	, LMP_MAIN.METERTIMESWITCHCODE AS "MeterTimeswitchCode"
	, LMP_MAIN.PROFILECLASS AS "ProfileClass"
	, LMP_MAIN.METERCLASS AS "MeterClass"
	, LMP_MAIN.RETRIEVALMETHOD AS "RetrievalMethod"
	, LMP_MAIN.SSC AS "SSC"
	, LMP_MAIN.VOLTAGETYPE AS "VoltageType"
	, LMP_MAIN.AMR AS "AMR"
	, LEFT(LMP_MAIN.AMREFFECTIVEDATE,10) AS "AMREffectiveDate"
--SECTION: METERING
	, CASE 
		WHEN LMP_MAIN.MeasurementClass IN ('B','D') THEN 'Y' 
		ELSE 'N' 
	END AS "UMSFlag"
	--New field: MeterHistory -- check code for Historical MPAN Portfolio
	--New field: MeterType
	, LMP_Metering.METER_TYPE_CURRENT AS "MeterType"
	--New field: MEXFlag
	,IFF(
		LISTAGG(LMP_Metering.METER_TYPE, ', ')
		WITHIN GROUP (ORDER BY LMP_Metering.INSTALLATIONDATE) LIKE '%,%', 'Yes', 'No'
		) AS "MEXFlag"
	--NEW field: CT_RATIO
	,LISTAGG(DISTINCT LMP_Metering.CTRATIO, ', ') AS "CTRatio"
--SECTION: SITE
	, LMP_MAIN.SITEREFERENCECODE AS "SiteReferenceCode"
	, LMP_MAIN.SITEADDRESS AS "SiteAddress"
	, LMP_MAIN.SITEADDRESSLINE1 AS "SiteAddressLine1"
	, LMP_MAIN.SITEADDRESSLINE2 AS "SiteAddressLine2"
	, LMP_MAIN.SITEADDRESSLINE3 AS "SiteAddressLine3"
	, LMP_MAIN.SITEADDRESSLINE4 AS "SiteAddressLine4"
	, LMP_MAIN.SITECITY AS "SiteCity"
	, LMP_MAIN.SITECOUNTY AS "SiteCounty"
	, LMP_MAIN.SITEPOSTCODE AS "SitePostcode"
--SECTION: BILLING
	, LMP_MAIN.BILLCYCLE AS "BillCycle"
	, LMP_MAIN.BILLINGFREQUENCY AS "BillingFrequency"
	, LMP_MAIN.BILLFORMATTYPE AS "BillFormatType"
	, LMP_MAIN.BILLINGTEAMNAME AS "BillingTeam"
	, LMP_MAIN.BILLINGADDRESSLINE1 AS "BillingAddressLine1"
	, LMP_MAIN.BILLINGADDRESSLINE2 AS "BillingAddressLine2"
	, LMP_MAIN.BILLINGADDRESSLINE3 AS "BillingAddressLine3"
	, LMP_MAIN.BILLINGADDRESSLINE4 AS "BillingAddressLine4"
	, LMP_MAIN.BILLINGADDRESSCITY AS "BillingAddressCity"
	, LMP_MAIN.BILLINGADDRESSCOUNTY AS "BillingAddressCounty"
	, LMP_MAIN.BILLINGADDRESSPOSTCODE AS "BillingAddressPostcode"
--SECTION: CUSTOMER
	, LMP_MAIN.TPIPRIMARYNAME AS "TPIName"
	, LMP_MAIN.MICROCUSTOMER AS "MicroCustomer"
	, LMP_MAIN.SMALLBUSINESSCUSTOMER AS "SmallBusinessCustomer"
	, LMP_MAIN.CREDITVETTINGOVERRIDE AS "CreditVettingOverride"
	, LMP_MAIN.DBCREDITRATING AS "DBCreditRating"
	, LMP_MAIN.DBOVERRIDESCORE AS "DBOverrideScore"
	, LMP_MAIN.SICCODE AS "SICCode"
	, LMP_MAIN.OPERATIONALSEGMENT AS "OperationalSegment"
	, LMP_MAIN.SERVICESTEAM AS "ServicesTeam"
	, LMP_MAIN.CUSTOMERADDRESS AS "CustomerAddress"
	, LMP_MAIN.CUSTOMERADDRESSLINE1 AS "CustomerAddressLine1"
	, LMP_MAIN.CUSTOMERADDRESSLINE2 AS "CustomerAddressLine2"
	, LMP_MAIN.CUSTOMERADDRESSLINE3 AS "CustomerAddressLine3"
	, LMP_MAIN.CUSTOMERADDRESSLINE4 AS "CustomerAddressLine4"
	, LMP_MAIN.CUSTOMERCITY AS "CustomerCity"
	, LMP_MAIN.CUSTOMERCOUNTY AS "CustomerCounty"
	, LMP_MAIN.CUSTOMERPOSTCODE AS "CustomerPostcode"
--SECTION: CONTRACT and SALES
	, LMP_MAIN.CONTRACTID AS "ContractID"
	, LMP_MAIN.MBFLEXID AS "MBFlexID"
	, LMP_MAIN.FRAMEWORKID as "FrameworkID"
	, LMP_MAIN.QMCONTRACTIDENTIFIER AS "ContractQuoteNumber"
	, LMP_MAIN.CONTRACTSTARTDATE AS "ContractStartDate"
	, LMP_MAIN.CONTRACTENDDATE AS "ContractEndDate"
	, LMP_MAIN.CONTRACTACCEPTANCEDATE AS "ContractAcceptanceDate"
	, LEFT(LMP_MAIN.CONTRACTCREATIONDATE,10) AS "ContractCreationDate"
	, LMP_MAIN.CONTRACTPRODUCTNAME AS "ContractProductName"
	, LMP_MAIN.MARKETTYPE AS "MarketType"
	, LMP_Sales_Segment_Stage1.QUOTECONSUMPTIONKWH AS "QuoteConsumptionkWhPricingPoint"
	, CASE 
		WHEN LMP_MAIN.CONTRACTPRODUCTNAME LIKE '%Flex%' THEN 'Standard Flex'
		WHEN LMP_MAIN.CONTRACTPRODUCTNAME IN ('Fixed - Peace of Mind CCS Site Additions','Site Add Product (Import)','Site Add Product (Import) Basket') THEN 'Standard Flex'
		WHEN LMP_MAIN.MARKETTYPE = 'Deemed' THEN 'Deemed'
		WHEN LMP_MAIN.MARKETTYPE = 'Extended Supply' THEN 'Extended Supply'
		WHEN LMP_MAIN.MARKETTYPE = 'Tariff' THEN 'Tariff'
		ELSE 'Non Flex' 
	END "ContractType"
FROM 
	Live_MPAN_Portfolio_Stage AS LMP_MAIN
--Quote and Sales data: updated to show quote consumption at MPAN level, as well as contract type ranking for flex residual revision contracts
	LEFT JOIN (
		SELECT
			qt1.CONTRACTID
            , qt1.VIEWORDER
            , qt1.MAXVIEWORDER
			, qt1.MPANCORE
			, qt1.SALESTEAMNAME
			, qt1.QUOTECONSUMPTIONKWH
		FROM (
			SELECT
                CASE
                    WHEN qid.ISPERIODLATESTVIEW = 'Yes' THEN 1
                    ELSE 0
                END AS VIEWORDER
                , MAX( 
                    CASE
                        WHEN qid.ISPERIODLATESTVIEW = 'Yes' THEN 1
                        ELSE 0
                    END) OVER (PARTITION BY sp.MPANCORE, con.CONTRACTID) AS MAXVIEWORDER
				, con.CONTRACTID
				, sp.MPANCORE
				, q.EDFSALESTEAMNAME AS SALESTEAMNAME
				, CASE 
					WHEN q.CONTRACTTYPE = 'Flex Framework' THEN 0
					WHEN q.CONTRACTTYPE = 'Flex Residual Lock' THEN 2
					WHEN q.CONTRACTTYPE = 'Flex Residual Revision' THEN 3
					WHEN q.CONTRACTTYPE = 'Multi-Customer Tender' THEN 1
					WHEN q.CONTRACTTYPE = 'Non-Flex Quote' THEN 1
					ELSE NULL
				END AS CONTRACTORDER
				, MAX(
					CASE 
						WHEN q.CONTRACTTYPE = 'Flex Framework' THEN 0
						WHEN q.CONTRACTTYPE = 'Flex Residual Lock' THEN 2
						WHEN q.CONTRACTTYPE = 'Flex Residual Revision' THEN 3
						WHEN q.CONTRACTTYPE = 'Multi-Customer Tender' THEN 1
						WHEN q.CONTRACTTYPE = 'Non-Flex Quote' THEN 1
						ELSE NULL
					END) OVER (PARTITION BY sp.MPANCORE, con.CONTRACTID) AS MAXCONTRACTORDER
				, RTRIM(SUM(fqc.UNITSPRICINGPOINT)) AS QUOTECONSUMPTIONKWH
			FROM 
				DIMENSIONAL_IAC.FACTQUOTECONSUMPTION fqc
				JOIN DIMENSIONAL_IAC.DIMCONTRACT con ON con.SK_CONTRACTID = fqc.SK_CONTRACTID
				AND con.CONTRACTID != ' Unknown'
				AND fqc.ISACTIVE = 1
				JOIN DIMENSIONAL_IAC.DIMQUOTE q ON q.SK_QUOTEID = fqc.SK_QUOTEID
				JOIN DIMENSIONAL_IAC.DIMSERVICEPOINT sp ON sp.SK_SERVICEPOINTID = fqc.SK_SERVICEPOINTID
				JOIN DIMENSIONAL_IAC.DIMQUOTEITEMDETAIL qid ON qid.SK_QUOTEITEMDETAILID = fqc.SK_QUOTEITEMDETAILID
			GROUP BY
				con.CONTRACTID
				, sp.MPANCORE
				, q.EDFSALESTEAMNAME
				, qid.ISPERIODLATESTVIEW
				, q.CONTRACTTYPE
			HAVING 
				SUM(fqc.UNITSPRICINGPOINT) IS NOT NULL
			) qt1
			WHERE 
				1=1
				AND qt1.CONTRACTORDER = qt1.MAXCONTRACTORDER
                AND qt1.VIEWORDER = MAXVIEWORDER
	) LMP_Sales_Segment_Stage1 ON LMP_Sales_Segment_Stage1.CONTRACTID = LMP_MAIN.CONTRACTID 
	AND LMP_Sales_Segment_Stage1.MPANCORE = LMP_MAIN.MPANCORE
--Meter data
	LEFT JOIN (
		SELECT 
			lmpmtr.MPANCORE
			, lmpmtr.INSTALLATIONDATE
			, lmpmtr.TRUNC_REMOVALDATE
			, lmpmtr.METER_TYPE
			, lmpmtr.METER_TYPE_CURRENT
			, lmpmtr.CTRATIO
		FROM 
			LMP_Metering lmpmtr
		GROUP BY 
			lmpmtr.MPANCORE
			, lmpmtr.INSTALLATIONDATE
			, lmpmtr.TRUNC_REMOVALDATE
			, lmpmtr.METER_TYPE
			, lmpmtr.METER_TYPE_CURRENT
			, lmpmtr.CTRATIO
		ORDER BY 
			lmpmtr.MPANCORE
			, lmpmtr.INSTALLATIONDATE ASC
	) AS LMP_Metering ON LMP_Metering.MPANCORE = LMP_MAIN.MPANCORE
	AND (
		LMP_MAIN.SASTARTDATE BETWEEN LMP_Metering.INSTALLATIONDATE AND LMP_Metering.TRUNC_REMOVALDATE 
		OR LMP_Metering.INSTALLATIONDATE BETWEEN LMP_MAIN.SASTARTDATE AND LMP_MAIN.SAENDDATE
	)
--Annualisation data
	LEFT JOIN LMP_Annualisation_Update ON LMP_MAIN.MPANCORE = LMP_Annualisation_Update.MPANCORE
	AND LMP_MAIN.AccountID = LMP_Annualisation_Update.ACCOUNTID
	LEFT JOIN LMP_Annualisation_Revenue_Master ON LMP_Annualisation_Update.ACCOUNTID = LMP_Annualisation_Revenue_Master.ACCOUNTID
	LEFT JOIN LMP_Annualisation_Vol ON LMP_Annualisation_Update.ACCOUNTID = LMP_Annualisation_Vol.ACCOUNTID
--Additional data
	LEFT JOIN LMP_VAT ON LMP_VAT.ACCOUNTID = LMP_MAIN.ACCOUNTID 
	AND (
		LMP_MAIN.SASTARTDATE BETWEEN LMP_VAT.DECSTARTDATE AND LMP_VAT.DECENDDATE 
		OR LMP_VAT.DECSTARTDATE BETWEEN LMP_MAIN.SASTARTDATE AND LMP_MAIN.SAENDDATE
	)
	LEFT JOIN LMP_Billing_Team ON LMP_Billing_Team.BILLINGTEAMNAME = UPPER(LMP_MAIN.BILLINGTEAMNAME)
	LEFT JOIN (
		SELECT 
			eac1.MPANCORE
			, eac1.ACCOUNTID
			, SUM(eac1.METERINGSYSTEMEACKWH) AS METERINGSYSTEMEACKWH
		FROM (
			SELECT 
				sp.MPANCORE
				, a.ACCOUNTID
				, MAX(dd.DATEVALUE) OVER (PARTITION BY sp.MPANCORE, a.ACCOUNTID) AS MAXDATE
				, dd.DATEVALUE
				, fmse.METERINGSYSTEMEACKWH
			FROM 
				DIMENSIONAL_IAC.FACTMETERINGSYSTEMEAC fmse
				JOIN DIMENSIONAL_IAC.DIMSERVICEPOINT sp ON sp.SK_SERVICEPOINTID = fmse.SK_SERVICEPOINTID
				JOIN DIMENSIONAL_IAC.DIMACCOUNT a ON a.SK_ACCOUNTID = fmse.SK_ACCOUNTID
				JOIN DIMENSIONAL_IAC.DIMDATE dd ON dd.SK_DATEID = fmse.SK_EFFECTIVEFROMDATEID
				JOIN DIMENSIONAL_IAC.DIMEACDETAIL ed ON ed.SK_EACDETAILID = fmse.SK_EACDETAILID 
				AND ed.ISCURRENTEAC = 'Yes'
		) eac1
		WHERE 
			eac1.DATEVALUE = eac1.MAXDATE
		GROUP BY
			eac1.MPANCORE
			, eac1.ACCOUNTID
	) MPANEAC ON MPANEAC.ACCOUNTID = LMP_MAIN.ACCOUNTID 
	AND MPANEAC.MPANCORE = LMP_MAIN.MPANCORE
--FILTERS
--where 
--	LMP_MAIN.LIVEACCOUNTFLAG ='Yes'
--	and LMP_MAIN.SASTATUS in ('Active','Pending Stop')
--	and LMP_MAIN.SUPPLIER in ('LOND', 'SEEB', 'SWEB')
--	and LMP_MAIN.SAIMPORTEXPORTFLAG = 'Import'
GROUP BY
--SECTION: LOOKUP
	LMP_MAIN.MPANCORE
	, LMP_MAIN.CUSTOMERNAME
	, LMP_MAIN.CUSTOMERID
	, LMP_MAIN.ACCOUNTID
	, LMP_MAIN.SITEID
	, LMP_MAIN.SUPPLIER
	, LMP_MAIN.SUPPLIERDATE
	--New field: BillingTeamSegmented (Large Business, Mid Market, NOC)
	, LMP_Billing_Team.BILLINGTEAMSEGMENT
	, MPANEAC.METERINGSYSTEMEACKWH
	, LMP_Annualisation_Vol.BILLEDCONSUMPTIONIMPORTKWHANNUALISED
	, LMP_Annualisation_Revenue_Master.ANNUALISED_AMOUNT
	--New field: LiveSubcategory -- check code for Historical MPAN Golden Table
--SECTION: ACCOUNT
	, LMP_MAIN.ACCOUNTTYPE
	, LMP_MAIN.PAYMENTMETHOD
	, LMP_MAIN.PAYMENTTERM
	, LMP_MAIN.ACCOUNTSTARTDATE
	, LMP_MAIN.ACCOUNTSETUPDATE
	--NEW Field: VAT_EXEMPT_CURRENT
	, LMP_MAIN.MASTERACCOUNTID
--SECTION: SERVICE AGREEMENT
	, LMP_MAIN.SAID
	, LMP_MAIN.SATYPE
	, LMP_MAIN.DUOS_SAID
	, LMP_MAIN.SASTARTDATE
	, LMP_MAIN.SAENDDATE
	, LMP_MAIN.SASTATUS
	, LMP_MAIN.DUOS_STATUS
	, LMP_MAIN.SARATESCHEDULE
	, LMP_MAIN.AGREEDSUPPLYCAPACITY
	, LMP_MAIN.PRICINGPOINT
	--	, LMP_MAIN.SAIMPORTEXPORTFLAG as "ImportExportFlag"
	, LMP_MAIN.MASTERSERVICEAGREEMENTID
--SECTION: MPAN SUPPLEMENTARY
	, LMP_MAIN.MARKETSEGMENT
	, LMP_MAIN.DATAAGGREGATOR
	, LMP_MAIN.DATACOLLECTOR
	, LMP_MAIN.METEROPERATOR
	, LMP_MAIN.ENERGISATIONSTATUS
	, LEFT(LMP_MAIN.ENERGISATIONSTATUSDATE,10)
	, LMP_MAIN.GSPGROUP
	, LMP_MAIN.DNONAME
	, LMP_MAIN.LINELOSSFACTOR
	, LMP_MAIN.MEASUREMENTCLASS
	, LMP_MAIN.METERTIMESWITCHCODE
	, LMP_MAIN.PROFILECLASS
	, LMP_MAIN.METERCLASS
	, LMP_MAIN.RETRIEVALMETHOD
	, LMP_MAIN.SSC
	, LMP_MAIN.VOLTAGETYPE
	, LMP_MAIN.AMR
	, LEFT(LMP_MAIN.AMREFFECTIVEDATE,10)
--SECTION: METERING
	, CASE 
		WHEN LMP_MAIN.MEASUREMENTCLASS IN ('B','D') THEN 'Y' 
		ELSE 'N' 
	END
	--New field: MeterHistory -- check code for Historical MPAN Portfolio
	--New field: MeterType
	, LMP_Metering.METER_TYPE_CURRENT
	--New field: MEXFlag
	--NEW field: CT_RATIO
--SECTION: SITE
	, LMP_MAIN.SITEREFERENCECODE
	, LMP_MAIN.SITEADDRESS
	, LMP_MAIN.SITEADDRESSLINE1
	, LMP_MAIN.SITEADDRESSLINE2
	, LMP_MAIN.SITEADDRESSLINE3
	, LMP_MAIN.SITEADDRESSLINE4
	, LMP_MAIN.SITECITY
	, LMP_MAIN.SITECOUNTY
	, LMP_MAIN.SITEPOSTCODE
--SECTION: BILLING
	, LMP_MAIN.BILLCYCLE
	, LMP_MAIN.BILLINGFREQUENCY
	, LMP_MAIN.BILLFORMATTYPE
	, LMP_MAIN.BILLINGTEAMNAME
	, LMP_MAIN.BILLINGADDRESSLINE1
	, LMP_MAIN.BILLINGADDRESSLINE2
	, LMP_MAIN.BILLINGADDRESSLINE3
	, LMP_MAIN.BILLINGADDRESSLINE4
	, LMP_MAIN.BILLINGADDRESSCITY
	, LMP_MAIN.BILLINGADDRESSCOUNTY
	, LMP_MAIN.BILLINGADDRESSPOSTCODE
--SECTION: CUSTOMER
	, LMP_MAIN.TPIPRIMARYNAME
	, LMP_MAIN.MICROCUSTOMER
	, LMP_MAIN.SMALLBUSINESSCUSTOMER
	, LMP_MAIN.CREDITVETTINGOVERRIDE
	, LMP_MAIN.DBCREDITRATING
	, LMP_MAIN.DBOVERRIDESCORE
	, LMP_MAIN.SICCODE
	, LMP_MAIN.OPERATIONALSEGMENT
	, LMP_MAIN.SERVICESTEAM
	, LMP_MAIN.CUSTOMERADDRESS
	, LMP_MAIN.CUSTOMERADDRESSLINE1
	, LMP_MAIN.CUSTOMERADDRESSLINE2
	, LMP_MAIN.CUSTOMERADDRESSLINE3
	, LMP_MAIN.CUSTOMERADDRESSLINE4
	, LMP_MAIN.CUSTOMERCITY
	, LMP_MAIN.CUSTOMERCOUNTY
	, LMP_MAIN.CUSTOMERPOSTCODE
--SECTION: CONTRACT and SALES
	, LMP_MAIN.CONTRACTID
	, LMP_MAIN.MBFLEXID
	, LMP_MAIN.FRAMEWORKID
	, LMP_MAIN.QMCONTRACTIDENTIFIER
	, LMP_MAIN.CONTRACTSTARTDATE
	, LMP_MAIN.CONTRACTENDDATE
	, LMP_MAIN.CONTRACTACCEPTANCEDATE
	, LEFT(LMP_MAIN.CONTRACTCREATIONDATE,10)
	, LMP_MAIN.CONTRACTPRODUCTNAME
	, LMP_MAIN.MARKETTYPE
	, LMP_SALES_SEGMENT_STAGE1.QUOTECONSUMPTIONKWH
	, CASE 
		WHEN LMP_MAIN.CONTRACTPRODUCTNAME LIKE '%Flex%' THEN 'Standard Flex'
		WHEN LMP_MAIN.CONTRACTPRODUCTNAME IN ('Fixed - Peace of Mind CCS Site Additions','Site Add Product (Import)','Site Add Product (Import) Basket') THEN 'Standard Flex'
		WHEN LMP_MAIN.MARKETTYPE = 'Deemed' THEN 'Deemed'
		WHEN LMP_MAIN.MARKETTYPE = 'Extended Supply' THEN 'Extended Supply'
		WHEN LMP_MAIN.MARKETTYPE = 'Tariff' THEN 'Tariff'
		ELSE 'Non Flex' 
	END