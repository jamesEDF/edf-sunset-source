WITH live_on_supply AS ( -- will only include IMPORT, need to get EXPORT
SELECT
  sp.MPANCORE, 
  cus.CUSTOMERNAME_CURRENT AS CUSTOMERNAME,
  cus.CUSTOMERID,
  s.SITEID,
  acc.ACCOUNTID,
  acc.LIVEACCOUNTFLAG,
  acc.ACCOUNTSETUPDATE,
  acc.ACCOUNTSTARTDATE,
  sa.IMPORTEXPORTFLAG AS SAIMPORTEXPORTFLAG,
  sa.SERVICEAGREEMENTTYPE AS SATYPE,
  sa.SERVICEAGREEMENTID AS SAID,
  sa.SASTARTDATE,
  sa.SAENDDATE,
  sa.SERVICEAGREEMENTSTATUS AS SASTATUS,
  saeff.RATESCHEDULEDESC AS SARATESCHEDULE,
  sp.MARKETSEGMENT_CURRENT AS MARKETSEGMENT,
  sp.SUPPLIERKEY
FROM FLK_DUB_DB_DATALAKE_PRD.DIMENSIONAL_IAC.FACTSERVICEPOINT fsp
JOIN FLK_DUB_DB_DATALAKE_PRD.DIMENSIONAL_IAC.DIMSERVICEPOINT sp ON fsp.SK_SERVICEPOINTID = sp.SK_SERVICEPOINTID
JOIN FLK_DUB_DB_DATALAKE_PRD.DIMENSIONAL_IAC.DIMCUSTOMER cus ON fsp.SK_CUSTOMERID = cus.SK_CUSTOMERID
JOIN FLK_DUB_DB_DATALAKE_PRD.DIMENSIONAL_IAC.DIMSITE s ON fsp.SK_SITEID = s.SK_SITEID
JOIN FLK_DUB_DB_DATALAKE_PRD.DIMENSIONAL_IAC.DIMACCOUNT acc ON fsp.SK_ACCOUNTID = acc.SK_ACCOUNTID
JOIN FLK_DUB_DB_DATALAKE_PRD.DIMENSIONAL_IAC.DIMSERVICEAGREEMENT sa ON fsp.SK_SERVICEAGREEMENTID = sa.SK_SERVICEAGREEMENTID AND sa.SERVICETYPE = 'Energy Service'
JOIN FLK_DUB_DB_DATALAKE_PRD.DIMENSIONAL_IAC.DIMCONTRACT con ON con.SK_CONTRACTID = fsp.SK_CONTRACTID
JOIN FLK_DUB_DB_DATALAKE_PRD.DIMENSIONAL_IAC.DIMSERVICEAGREEMENTEFFECTIVEDETAIL saeff ON saeff.SK_SERVICEAGREEMENTEFFECTIVEDETAILID = fsp.SK_SERVICEAGREEMENTEFFECTIVEDETAILID
WHERE TRUE
  AND sp.SUPPLIERKEY IN ('LOND', 'SEEB', 'SWEB') --ask Andy/Charlie if import is the only criteria that needs to be removed to get full portfolio for EBS to include export, and why supplier key is used alongside service agreement
  --AND sa.IMPORTEXPORTFLAG = 'Import'
GROUP BY
  sp.MPANCORE,
  cus.CUSTOMERNAME_CURRENT,
  cus.CUSTOMERID,
  s.SITEID,
  acc.ACCOUNTID,
  acc.LIVEACCOUNTFLAG,
  acc.ACCOUNTSETUPDATE,
  acc.ACCOUNTSTARTDATE,
  sa.IMPORTEXPORTFLAG,
  sa.SERVICEAGREEMENTTYPE,
  sa.SERVICEAGREEMENTID,
  sa.SASTARTDATE,
  sa.SAENDDATE,
  sa.SERVICEAGREEMENTSTATUS,
  saeff.RATESCHEDULEDESC,
  sp.MARKETSEGMENT_CURRENT,
  sp.SUPPLIERKEY
),
 
installed_meters AS (
SELECT DISTINCT
  d1_dvc.d1_device_id,
  d1_sp_identifier.id_value AS MPAN,
  REGEXP_REPLACE(RTRIM(d1_dvc_identifier.id_value,'_P272'),'[[:punct:]]|[ ]','') AS msn,
  d1_dvc_cfg.eff_dttm AS date_installed,
  --d1_dvc_cfg.status_upd_dttm,
  d1_dvc.d1_model_cd AS OutstationType
FROM flk_dub_db_datalake_prd.staging_mdm.d1_dvc
INNER JOIN flk_dub_db_datalake_prd.staging_mdm.d1_dvc_identifier
  ON d1_dvc_identifier.d1_device_id = d1_dvc.d1_device_id
  AND d1_dvc_identifier.deleteflag = 'FALSE'
INNER JOIN flk_dub_db_datalake_prd.staging_mdm.d1_dvc_cfg
  ON d1_dvc_cfg.d1_device_id = d1_dvc.d1_device_id
  AND d1_dvc_cfg.deleteflag = 'FALSE'
INNER JOIN flk_dub_db_datalake_prd.staging_mdm.d1_install_evt
  ON d1_install_evt.device_config_id = d1_dvc_cfg.device_config_id
  AND d1_install_evt.deleteflag = 'FALSE'
INNER JOIN flk_dub_db_datalake_prd.staging_mdm.d1_sp_rel
  ON d1_sp_rel.d1_sp_id = d1_install_evt.d1_sp_id
  AND d1_sp_rel.deleteflag = 'FALSE'
INNER JOIN flk_dub_db_datalake_prd.staging_mdm.d1_sp_identifier
  ON d1_sp_identifier.d1_sp_id = d1_sp_rel.REL_SP_ID
  AND d1_sp_identifier.deleteflag = 'FALSE'
  AND d1_sp_identifier.sp_id_type_flg = 'DMMI'
WHERE TRUE
  and d1_dvc.deleteflag = 'FALSE'
  and d1_dvc.bo_status_cd = 'ACTIVE'
),
 
com_addr AS (
SELECT DISTINCT
  d1_device_id,
  effdt,
  adhoc_char_val
FROM flk_dub_db_datalake_prd.staging_mdm.d1_dvc_char
WHERE TRUE
  and deleteflag = 'FALSE'
  and char_type_cd = 'DMCOMAD'
QUALIFY ROW_NUMBER() OVER (PARTITION BY d1_device_id ORDER BY effdt DESC) = 1
),
 
meter_type AS (
SELECT DISTINCT
  d1_device_id,
  effdt,
  char_val
FROM flk_dub_db_datalake_prd.staging_mdm.d1_dvc_char
WHERE TRUE
  and deleteflag = 'FALSE'
  and char_type_cd = 'DMMTYP'
QUALIFY ROW_NUMBER() OVER (PARTITION BY d1_device_id ORDER BY effdt DESC) = 1
),
 
com_method AS (
SELECT DISTINCT
  d1_device_id,
  effdt,
  char_val
FROM flk_dub_db_datalake_prd.staging_mdm.d1_dvc_char
WHERE TRUE 
  and deleteflag = 'FALSE'
  and char_type_cd = 'DMCOMMET'
QUALIFY ROW_NUMBER() OVER (PARTITION BY d1_device_id ORDER BY effdt DESC) = 1
),
 
ecoes AS (
SELECT DISTINCT
  current_stage.mpan,
  current_stage.mc,
  REGEXP_REPLACE(mpanmsn.meter_serial,'[[:punct:]]|[ ]','') AS meter_serial,
  TRY_TO_DATE(mpanmsn.meter_install_date,'YYYYMMDD') AS meter_install_date,
FROM flk_dub_db_datalake_prd.staging_ecoes.current_stage
LEFT JOIN flk_dub_db_datalake_prd.staging_ecoes.mpanmsn
  ON mpanmsn.mpan = current_stage.mpan
  AND mpanmsn.deleteflag = 'FALSE'
WHERE current_stage.deleteflag = 'FALSE'
),
 
ecoes_count AS (
SELECT 
  mpan, 
  COUNT(DISTINCT meter_serial) AS cnt 
FROM ecoes 
WHERE meter_serial IS NOT NULL 
GROUP BY mpan
),
 
main as (
SELECT DISTINCT
  CONCAT(los.mpancore,' - ',im.msn) AS record_id,
  los.mpancore AS mpan,
  COUNT(DISTINCT im.msn) OVER(PARTITION BY los.mpancore) AS mtr_count,
  im.msn AS msn,
  mt.char_val AS meter_type,
  TO_DATE(im.date_installed) AS date_installed,
  im.OutstationType AS outstation_type, --fine
  cm.char_val AS communication_method,
  ca.adhoc_char_val AS communication_address,
  --im.d1_device_id IS NOT NULL AS meter_installed,
  --ecoes.meter_serial ecoes_msn,
  --ecoes.meter_install_date ecoes_installed,
  --CASE WHEN ecoes_installed IS NULL THEN NULL WHEN date_installed = ecoes_installed THEN 'TRUE' ELSE 'FALSE' END AS install_match,
  --ec.cnt AS ecoes_mtr_count,
  --mtr_count - ecoes_mtr_count AS diff
FROM live_on_supply los
INNER JOIN installed_meters im ON im.MPAN = los.mpancore --CHANGED FROM LEFT TO ONLY INCLUDE INSTALLED METERS FOR EBS SUPPLY
LEFT JOIN com_addr ca ON ca.d1_device_id = im.d1_device_id
LEFT JOIN meter_type mt ON mt.d1_device_id = im.d1_device_id
LEFT JOIN com_method cm ON cm.d1_device_id = im.d1_device_id)
--LEFT JOIN Ecoes ON Ecoes.mpan = los.mpancore AND Ecoes.meter_serial = im.msn
--LEFT JOIN flk_dub_db_datalake_prd.dim_consumption_iac.v_dimservicepoint vdsp ON vdsp.SITEID = los.siteid
--LEFT JOIN ecoes_count ec ON ec.mpan = los.mpancore)
 
select distinct * from main ORDER BY record_id